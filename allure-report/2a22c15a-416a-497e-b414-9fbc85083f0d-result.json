{"name": "test_edit_users", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nCurrent browser version is 116.0.5845.97 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x009CA813+48355]\n\t(No symbol) [0x0095C4B1]\n\t(No symbol) [0x00865358]\n\t(No symbol) [0x008861AC]\n\t(No symbol) [0x00881EF3]\n\t(No symbol) [0x00880579]\n\t(No symbol) [0x008B0C55]\n\t(No symbol) [0x008B093C]\n\t(No symbol) [0x008AA536]\n\t(No symbol) [0x008882DC]\n\t(No symbol) [0x008893DD]\n\tGetHandleVerifier [0x00C2AABD+2539405]\n\tGetHandleVerifier [0x00C6A78F+2800735]\n\tGetHandleVerifier [0x00C6456C+2775612]\n\tGetHandleVerifier [0x00A551E0+616112]\n\t(No symbol) [0x00965F8C]\n\t(No symbol) [0x00962328]\n\t(No symbol) [0x0096240B]\n\t(No symbol) [0x00954FF7]\n\tBaseThreadInitThunk [0x765E00C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DA7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77DA7AEE+238]", "trace": "request = <SubRequest 'setUp' for <TestCaseFunction test_edit_users>>\n\n    @pytest.fixture(autouse=True, scope=\"class\")\n    def setUp(request):\n        global driver\n        browser = request.config.getoption(\"--browser\")\n    \n        if browser == \"chrome\":\n            print(browser + \" is started\")\n            chrome_options = webdriver.ChromeOptions()\n            path = os.getcwd()\n            list_path = list(path)\n    \n            preferences = {\n                \"profile.default_content_settings.popups\": 0,\n                \"download.default_directory\": list_path[0] + \":\\\\CP StarterKIT Automation\\\\DownloadFiles\",\n                \"download.prompt_for_download\": False,\n                \"download.directory_upgrade\": True,\n                \"safebrowsing.enabled\": True,\n                \"plugins.always_open_pdf_externally\": True\n            }\n            chrome_options.add_experimental_option(\"prefs\", preferences)\n            driver = webdriver.Chrome(options=chrome_options)\n            driver.maximize_window()\n            driver.delete_cookie(browser)\n            driver.implicitly_wait(3.2)\n    \n        elif browser == \"firefox\":\n            path = os.getcwd()\n            list_path = list(path)\n    \n            fp = webdriver.FirefoxOptions()\n            fp.set_preference(\"browser.download.folderList\", 2)\n            fp.set_preference(\"browser.download.dir\",  list_path[0] + \":\\\\CP StarterKIT \"\n                                                                                  \"Automation\\\\DownloadFiles\")\n            fp.set_preference(\"browser.download.useDownloadDir\", True)\n            fp.set_preference(\"browser.download.viewableInternally.enabledTypes\", \"\")\n            fp.set_preference(\"browser.download.manager.useWindow\", False)\n            fp.set_preference(\"browser.download.manager.showWhenStarting\", False)\n            fp.set_preference(\"browser.download.manager.closeWhenDone\", True)\n            fp.set_preference('browser.helperApps.neverAsk.openFile', \"application/zip\")\n            fp.set_preference(\"browser.helperApps.neverAsk.saveToDisk\", \"application/zip\")\n            fp.set_preference(\"pdfjs.disabled\", True)\n    \n            # driver = webdriver.Firefox(firefox_profile=fp)\n    \n            print(browser + \" is started\")\n            driver = webdriver.Firefox(options=fp)\n            driver.maximize_window()\n            driver.delete_cookie(browser)\n            driver.implicitly_wait(3.2)\n        elif browser == \"edge\":\n            print(browser + \" is started\")\n            driver = webdriver.Edge(browser)\n            driver.maximize_window()\n            driver.delete_cookie()\n            driver.implicitly_wait(3.2)\n        else:\n    \n            chrome_options = webdriver.ChromeOptions()\n            path = os.getcwd()\n            list_path = list(path)\n    \n            preferences = {\n                \"profile.default_content_settings.popups\": 0,\n                \"download.default_directory\": list_path[0] + \":\\\\CP StarterKIT Automation\\\\DownloadFiles\",\n                \"download.prompt_for_download\": False,\n                \"download.directory_upgrade\": True,\n                \"safebrowsing.enabled\": True,\n                \"plugins.always_open_pdf_externally\": True\n            }\n    \n            chrome_options.add_experimental_option(\"prefs\", preferences)\n>           driver = webdriver.Chrome(options=chrome_options)\n\nTestCases\\conftest.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\mjasti\\PycharmProjects\\CP StarterKIT Automation\\venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:49: in __init__\n    super().__init__(\nC:\\Users\\mjasti\\PycharmProjects\\CP StarterKIT Automation\\venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:54: in __init__\n    super().__init__(\nC:\\Users\\mjasti\\PycharmProjects\\CP StarterKIT Automation\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:206: in __init__\n    self.start_session(capabilities)\nC:\\Users\\mjasti\\PycharmProjects\\CP StarterKIT Automation\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:291: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nC:\\Users\\mjasti\\PycharmProjects\\CP StarterKIT Automation\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000197D483D390>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DA7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DA7AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nE       Current browser version is 116.0.5845.97 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x009CA813+48355]\nE       \t(No symbol) [0x0095C4B1]\nE       \t(No symbol) [0x00865358]\nE       \t(No symbol) [0x008861AC]\nE       \t(No symbol) [0x00881EF3]\nE       \t(No symbol) [0x00880579]\nE       \t(No symbol) [0x008B0C55]\nE       \t(No symbol) [0x008B093C]\nE       \t(No symbol) [0x008AA536]\nE       \t(No symbol) [0x008882DC]\nE       \t(No symbol) [0x008893DD]\nE       \tGetHandleVerifier [0x00C2AABD+2539405]\nE       \tGetHandleVerifier [0x00C6A78F+2800735]\nE       \tGetHandleVerifier [0x00C6456C+2775612]\nE       \tGetHandleVerifier [0x00A551E0+616112]\nE       \t(No symbol) [0x00965F8C]\nE       \t(No symbol) [0x00962328]\nE       \t(No symbol) [0x0096240B]\nE       \t(No symbol) [0x00954FF7]\nE       \tBaseThreadInitThunk [0x765E00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DA7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DA7AEE+238]\n\nC:\\Users\\mjasti\\PycharmProjects\\CP StarterKIT Automation\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: SessionNotCreatedException"}, "start": 1692872968957, "stop": 1692872968957, "uuid": "432307d1-11eb-46d9-9b17-0b15034b37c5", "historyId": "564f29e87217d06a4900c9fad7fbe82b", "testCaseId": "564f29e87217d06a4900c9fad7fbe82b", "fullName": "TestCases.UserManagement.test_edit_user.Test_Edit_user#test_edit_users", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "order(5)"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "TestCases.UserManagement"}, {"name": "suite", "value": "test_edit_user"}, {"name": "subSuite", "value": "Test_Edit_user"}, {"name": "host", "value": "ENCDAPHYDLT0374"}, {"name": "thread", "value": "17964-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.UserManagement.test_edit_user"}]}